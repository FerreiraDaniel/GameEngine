package gameEngine.shaders.entities;

import java.util.ArrayList;
import java.util.List;

import com.dferreira.commons.GLTransformation;
import com.dferreira.commons.IEnum;
import com.dferreira.commons.Vector3f;
import com.dferreira.commons.models.Light;

import gameEngine.shaders.ShaderManager;

/**
 * Manager of the shader files that are going to be load to render the 
 * 3D Entities
 */
public class EntityShaderManager extends ShaderManager {


	/**
	 * Path of the vertex shader file
	 */
	private static final String VERTEX_FILE = COMMON_PATH + "entities/entity_vertex_shader.glsl";

	/**
	 * Path of the fragment shader file
	 */
	private static final String FRAGMENT_FILE = COMMON_PATH + "entities/entity_fragment_shader.glsl";


	
	/**
	 * All the locations in the shader programs
	 */
	private int[] locations;

	
	/**
	 * Constructor of the game shader where the vertex and fragment shader of
	 * the game engine are loaded
	 */
	public EntityShaderManager() {
		super(VERTEX_FILE, FRAGMENT_FILE);
	}

	/**
	 * Bind the attributes to the program
	 * 
	 */
	@Override
	protected List<IEnum> getAttributes() {
		List<IEnum> attributes = new ArrayList<>();
		attributes.add(TEntityAttribute.position);
		attributes.add(TEntityAttribute.textureCoords);
		attributes.add(TEntityAttribute.normal);
		
		return attributes;
	}

	/**
	 * Get all the uniform location in the shader script
	 */
	@Override
	protected void getAllUniformLocations() {		
		int size = TEntityUniform.numOfEntityLocations.getValue();
		locations = new int[size];
		
		for(int i = 0;i < size; i++ ) {
			TEntityUniform locationKey = TEntityUniform.values()[i];
			locations[i] = super.getUniformLocation(locationKey.toString());
		}
	}
	
	/**
	 * Load the color of the sky in order to simulate fog
	 * 
	 * @param skyColor
	 * 			Color of the sky
	 */
	public void loadSkyColor(Vector3f skyColor) {
		super.loadVector(locations[TEntityUniform.skyColor.getValue()], skyColor);
	}

	/**
	 * Load the projection matrix
	 * 
	 * @param matrix
	 *            the matrix to be loaded
	 */
	public void loadProjectionMatrix(GLTransformation matrix) {
		super.loadMatrix(locations[TEntityUniform.projectionMatrix.getValue()], matrix);
	}
	
	/**
	 * Put passes the information of the light to the 
	 * Shader program
	 * 
	 * @param light the light to load in the shader program
	 */
	public void loadLight(Light light){
		super.loadVector(locations[TEntityUniform.lightPosition.getValue()], light.getPosition());
		super.loadVector(locations[TEntityUniform.lightColor.getValue()], light.getColor());
	}
	
	/**
	 * Load the values of the specular light in the fragment shader
	 * 
	 * @param damper		The damper of the specular lighting
	 * @param reflectivity	The reflectivity of the material
	 */
	public void loadShineVariables(float damper, float reflectivity) {
	    super.loadFloat(locations[TEntityUniform.shineDamper.getValue()], damper);
	    super.loadFloat(locations[TEntityUniform.reflectivity.getValue()] ,reflectivity);
	}
	
	/**
	 * Set in the shader if the normals should all of them point up
	 * 
 * @param normalsPointingUp Flag that indicates if all the normals of the entity are poiting up or not
	 */
	public void loadNormalsPointingUp(boolean normalsPointingUp) {
		super.loadBoolean(locations[TEntityUniform.normalsPointingUp.getValue()], normalsPointingUp);
	}
	


	/**
	 * Load the view matrix
	 * 
	 * @param matrix
	 *            the matrix to be loaded
	 */
	public void loadViewMatrix(GLTransformation matrix) {
		super.loadMatrix(locations[TEntityUniform.viewMatrix.getValue()], matrix);
	}

	/**
	 * Load the transformation matrix
	 * 
	 * @param matrix
	 *            the matrix to be loaded
	 */
	public void loadTransformationMatrix(GLTransformation matrix) {
		super.loadMatrix(locations[TEntityUniform.transformationMatrix.getValue()], matrix);
	}

}
